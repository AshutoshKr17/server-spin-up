name: GPU Cloud Manager CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  # Job to automatically label PRs
  label-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
    steps:
      - name: Label Hacktoberfest PRs
        if: github.event.pull_request.created_at >= '2024-10-01T00:00:00Z' && github.event.pull_request.created_at <= '2024-10-31T23:59:59Z'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['hacktoberfest']
            });

  # Go code quality and linting checks
  go-lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Verify dependencies
        run: go mod verify

      - name: Build application
        run: go build -v ./cmd/api

      - name: Run go vet
        run: go vet ./...

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        run: staticcheck ./...

      - name: Install golint
        run: go install golang.org/x/lint/golint@latest

      - name: Run golint
        run: golint ./...

      - name: Run tests
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  # Docker build and test
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: gpu-cloud-manager:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm --name test-container -d -p 8080:8080 gpu-cloud-manager:test
          sleep 10
          curl -f http://localhost:8080/health || exit 1
          docker stop test-container

  # Markdown and documentation checks
  docs-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js for markdown linting
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install markdownlint
        run: npm install -g markdownlint-cli

      - name: Lint Markdown files
        run: markdownlint "*.md" ".github/**/*.md" --ignore node_modules || true

      - name: Check for broken links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          config-file: '.github/workflows/mlc_config.json'
        continue-on-error: true

  # Go security scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Run gosec security scanner
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec ./...

  # Cross-platform Go testing
  cross-platform-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.20', '1.21']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Run tests
        run: go test -v ./...

      - name: Build for different architectures
        run: |
          GOOS=linux GOARCH=amd64 go build -v ./cmd/api
          GOOS=darwin GOARCH=amd64 go build -v ./cmd/api
          GOOS=windows GOARCH=amd64 go build -v ./cmd/api

  # Validate contribution guidelines
  validate-contribution:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check PR title format
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.pull_request.title;
            const validPrefixes = ['feat:', 'fix:', 'docs:', 'style:', 'refactor:', 'test:', 'chore:'];
            const isValid = validPrefixes.some(prefix => title.toLowerCase().startsWith(prefix)) || 
                           title.startsWith('[') || 
                           /^(add|update|fix|remove|improve|create)/i.test(title);
            
            if (!isValid) {
              core.setFailed(`PR title should start with a conventional commit prefix (${validPrefixes.join(', ')}) or descriptive verb`);
            }

      - name: Check for required PR sections
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.pull_request.body || '';
            const requiredSections = ['## 📋 Pull Request Description', '### 🎯 What does this PR do?'];
            const missingSections = requiredSections.filter(section => !body.includes(section));
            
            if (missingSections.length > 0) {
              core.setFailed(`PR is missing required sections: ${missingSections.join(', ')}`);
            }

  # Auto-assign reviewers for Hacktoberfest PRs
  assign-reviewers:
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Auto-assign reviewers
        uses: actions/github-script@v7
        with:
          script: |
            // Add maintainers as reviewers (update with actual maintainer usernames)
            const maintainers = ['m1rage']; // Add actual maintainer usernames
            
            try {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                reviewers: maintainers
              });
            } catch (error) {
              console.log('Could not assign reviewers:', error.message);
            }

  # Welcome new contributors
  welcome:
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Welcome first-time contributors
        uses: actions/github-script@v7
        with:
          script: |
            const author = context.payload.pull_request.user.login;
            
            // Check if this is the user's first PR to this repo
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              creator: author
            });
            
            if (prs.length === 1) {
              const welcomeMessage = `
              🎉 **Welcome to GPU Cloud Manager, @${author}!** 
              
              Thank you for your first contribution to our GPU cloud management platform! 🚀
              
              A few things to keep in mind:
              - ✅ Make sure your PR follows our [contribution guidelines](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/CONTRIBUTING.md)
              - 🧪 Test your Go code changes locally before pushing
              - 📝 Update documentation if needed
              - 🎃 If this is for Hacktoberfest, make sure your contribution is meaningful!
              - 🐹 Don't forget to run \`go fmt\` and \`go vet\` on your code
              
              Our maintainers will review your PR soon. Feel free to ask questions if you need help!
              
              Happy coding! 💻
              `;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: welcomeMessage
              });
            }
